name: Full Deployment (Backend + Frontend)

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  PROJECT_ID: canary-digital-475319
  REGION: europe-west1

jobs:
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    outputs:
      backend-url: ${{ steps.get-backend-url.outputs.url }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy Backend to Cloud Run
        run: |
          cd backend
          gcloud run deploy canary-backend \
            --source . \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --min-instances=0 \
            --max-instances=10 \
            --memory=512Mi \
            --cpu=1 \
            --port=4000 \
            --timeout=300 \
            --set-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:canary-postgres \
            --update-secrets=JWT_SECRET=jwt-secret:latest \
            --update-secrets=JWT_REFRESH_SECRET=jwt-secret:latest \
            --update-secrets=DATABASE_URL=database-url:latest \
            --set-env-vars="NODE_ENV=production"

      - name: Get Backend URL
        id: get-backend-url
        run: |
          URL=$(gcloud run services describe canary-backend \
            --region=${{ env.REGION }} \
            --format='value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "Backend URL: $URL"

      - name: Backend Health Check
        run: |
          sleep 15
          curl -f ${{ steps.get-backend-url.outputs.url }}/api/health || exit 1

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: deploy-backend
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        run: |
          cd frontend
          npm ci

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Build Frontend with VITE_API_URL
        env:
          VITE_API_URL: ${{ needs.deploy-backend.outputs.backend-url }}/api
        run: |
          cd frontend
          echo "Building with VITE_API_URL=$VITE_API_URL"
          npm run build
          echo "Build complete - dist folder ready"
          ls -la dist/

      - name: Prepare Frontend for deployment
        run: |
          cd frontend
          # Backup original Dockerfile
          cp Dockerfile Dockerfile.original
          # Create simple Dockerfile for pre-built dist
          cat > Dockerfile << 'EOF'
          FROM nginx:alpine
          COPY dist /usr/share/nginx/html
          COPY nginx.conf /etc/nginx/conf.d/default.conf
          EXPOSE 8080
          CMD ["nginx", "-g", "daemon off;"]
          EOF
          
      - name: Deploy Frontend to Cloud Run
        run: |
          cd frontend
          gcloud run deploy canary-frontend \
            --source . \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --min-instances=0 \
            --max-instances=10 \
            --memory=256Mi \
            --cpu=1 \
            --port=8080

      - name: Get Frontend URL
        id: get-frontend-url
        run: |
          URL=$(gcloud run services describe canary-frontend \
            --region=${{ env.REGION }} \
            --format='value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "Frontend URL: $URL"

      - name: Frontend Health Check
        run: |
          sleep 10
          curl -f ${{ steps.get-frontend-url.outputs.url }} || exit 1

      - name: Update Backend CORS
        run: |
          # Backend'e frontend URL'ini CORS'a ekle
          echo "Updating backend CORS with frontend URL: ${{ steps.get-frontend-url.outputs.url }}"

  notify-success:
    name: Deployment Success
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: success()
    
    steps:
      - name: Success Notification
        run: |
          echo "üéâ Full deployment successful!"
          echo "Backend: ${{ needs.deploy-backend.outputs.backend-url }}"
          echo "Frontend: Check Cloud Run console"

  notify-failure:
    name: Deployment Failure
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: failure()
    
    steps:
      - name: Failure Notification
        run: |
          echo "‚ùå Deployment failed!"
          echo "Check the logs for details"
          exit 1
