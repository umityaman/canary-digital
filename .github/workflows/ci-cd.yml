name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  # Backend Tests and Build
  backend:
    name: Backend CI/CD
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run TypeScript compiler
        run: npx tsc --noEmit

      - name: Run linter
        run: npm run lint --if-present

      - name: Run tests
        run: npm test --if-present
        env:
          DATABASE_URL: file:./test.db
          JWT_SECRET: test-secret
          JWT_REFRESH_SECRET: test-refresh-secret

      - name: Build
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: backend/dist

  # Frontend Tests and Build
  frontend:
    name: Frontend CI/CD
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript compiler
        run: npx tsc --noEmit

      - name: Run linter
        run: npm run lint --if-present

      - name: Run tests
        run: npm test --if-present

      - name: Build
        run: npm run build
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL || 'http://localhost:3000' }}

      - name: Generate bundle stats
        run: ls -lah dist/assets || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist

  # Mobile App Tests
  mobile:
    name: Mobile CI/CD
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./mobile

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: mobile/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript compiler
        run: npx tsc --noEmit

      - name: Run linter
        run: npm run lint --if-present

      - name: Run tests
        run: npm test --if-present

  # Deploy Backend to Railway
  deploy-backend:
    name: Deploy Backend
    needs: [backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: backend/dist

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway
        run: railway up
        working-directory: ./backend
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  # Deploy Frontend to Vercel
  deploy-frontend:
    name: Deploy Frontend
    needs: [frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--prod'

  # Build Mobile App with EAS
  build-mobile:
    name: Build Mobile App
    needs: [mobile]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Install dependencies
        run: npm ci
        working-directory: ./mobile

      - name: Build Android APK
        run: eas build --platform android --non-interactive
        working-directory: ./mobile
        if: false # Enable when ready

      - name: Build iOS IPA
        run: eas build --platform ios --non-interactive
        working-directory: ./mobile
        if: false # Enable when ready

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run npm audit (Backend)
        run: npm audit --audit-level=moderate
        working-directory: ./backend
        continue-on-error: true

      - name: Run npm audit (Frontend)
        run: npm audit --audit-level=moderate
        working-directory: ./frontend
        continue-on-error: true

      - name: Run npm audit (Mobile)
        run: npm audit --audit-level=moderate
        working-directory: ./mobile
        continue-on-error: true

  # Notification
  notify:
    name: Notify Deployment
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Send notification
        run: |
          echo "ðŸš€ Deployment completed!"
          echo "Backend: ${{ needs.deploy-backend.result }}"
          echo "Frontend: ${{ needs.deploy-frontend.result }}"
