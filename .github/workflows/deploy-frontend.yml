name: Deploy Frontend to Cloud Run

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - '.github/workflows/deploy-frontend.yml'
  workflow_dispatch: # Manuel trigger i√ßin

env:
  PROJECT_ID: canary-digital-475319
  REGION: europe-west1
  SERVICE_NAME: canary-frontend
  BACKEND_URL: https://canary-backend-672344972017.europe-west1.run.app

jobs:
  deploy:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        run: |
          cd frontend
          npm ci

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Build Frontend with VITE_API_URL
        env:
          VITE_API_URL: https://canary-backend-672344972017.europe-west1.run.app
        run: |
          cd frontend
          echo "üî• FORCING FRESH BUILD - NO CACHE"
          echo "VITE_API_URL=$VITE_API_URL"
          rm -rf dist node_modules/.vite .vite
          npm run build
          echo "‚úÖ Build complete - dist folder ready"
          ls -la dist/
          echo "üì¶ Checking built files for API URL..."
          grep -r "canary-backend" dist/ | head -5 || true

      - name: Prepare Frontend for deployment
        run: |
          cd frontend
          # Backup original Dockerfile
          cp Dockerfile Dockerfile.original
          # Create simple Dockerfile for pre-built dist
          cat > Dockerfile << 'EOF'
          FROM nginx:alpine
          COPY dist /usr/share/nginx/html
          COPY nginx.conf /etc/nginx/conf.d/default.conf
          EXPOSE 8080
          CMD ["nginx", "-g", "daemon off;"]
          EOF

      - name: Deploy to Cloud Run
        run: |
          cd frontend
          echo "üöÄ Deploying to Cloud Run..."
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --source . \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --min-instances=0 \
            --max-instances=10 \
            --memory=256Mi \
            --cpu=1 \
            --port=8080

      - name: Get Service URL
        id: get-url
        run: |
          URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format='value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "Frontend deployed to: $URL"

      - name: Health Check
        run: |
          sleep 10
          curl -f ${{ steps.get-url.outputs.url }} || exit 1

      - name: Deployment Success Notification
        if: success()
        run: |
          echo "‚úÖ Frontend deployment successful!"
          echo "URL: ${{ steps.get-url.outputs.url }}"

      - name: Deployment Failure Notification
        if: failure()
        run: |
          echo "‚ùå Frontend deployment failed!"
          exit 1
