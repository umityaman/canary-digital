name: Deploy Frontend to Cloud Run

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - '.github/workflows/deploy-frontend.yml'
  workflow_dispatch: # Manuel trigger için

# Prevent concurrent deployments
concurrency:
  group: deploy-frontend-${{ github.ref }}
  cancel-in-progress: false

env:
  PROJECT_ID: canary-digital-475319
  REGION: europe-west1
  SERVICE_NAME: canary-frontend
  BACKEND_URL: https://canary-backend-672344972017.europe-west1.run.app

jobs:
  test:
    name: Frontend tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        run: |
          cd frontend
          npm ci --no-audit --prefer-offline || npm install --no-audit --prefer-offline

      - name: Run frontend tests (if present)
        run: |
          cd frontend
          npm run test --if-present

  deploy:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          # Deploy job runs `npm ci` at the repository root (workspaces);
          # use the root package-lock.json so cache keys match the install.
          cache-dependency-path: package-lock.json

      - name: Install Dependencies
        run: |
          echo "Installing npm workspaces at repository root"
          echo "Repo root: $(pwd)"
          echo "node: $(node -v) npm: $(npm -v)"
          npm ci --no-audit --prefer-offline || npm install --no-audit --prefer-offline

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Prepare .dockerignore
        run: |
          cd frontend
          cat > .dockerignore << 'EOF'
          node_modules
          .git
          .github
          .vscode
          .DS_Store
          *.md
          .env.local
          .env.development
          coverage
          build.log
          EOF
          echo "Created .dockerignore"

      - name: Deploy to Cloud Run
        run: |
          cd frontend
          echo "Deploying to Cloud Run with build args..."
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --source . \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --min-instances=0 \
            --max-instances=10 \
            --memory=512Mi \
            --cpu=1 \
            --port=8080 \
            --timeout=900 \
            --set-build-env-vars="VITE_API_URL=${{ env.BACKEND_URL }}"

      - name: Get Service URL
        id: get-url
        run: |
          URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format='value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "Frontend deployed to: $URL"

      - name: Health Check
        run: |
          sleep 10
          curl -f ${{ steps.get-url.outputs.url }} || exit 1

      - name: Deployment Success Notification
        if: success()
        run: |
          echo "✅ Frontend deployment successful!"
          echo "URL: ${{ steps.get-url.outputs.url }}"
          echo "Deployment timestamp: $(date)"

      - name: Deployment Failure Notification
        if: failure()
        run: |
          echo "❌ Frontend deployment failed!"
          exit 1
