name: Deploy Frontend to Cloud Run

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - '.github/workflows/deploy-frontend.yml'
  workflow_dispatch: # Manuel trigger için

# Prevent concurrent deployments
concurrency:
  group: deploy-frontend-${{ github.ref }}
  cancel-in-progress: false

env:
  PROJECT_ID: canary-digital-475319
  REGION: europe-west1
  SERVICE_NAME: canary-frontend
  BACKEND_URL: https://canary-backend-672344972017.europe-west1.run.app

jobs:
  deploy:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        run: |
          cd frontend
          npm ci

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Build Frontend with correct API URL
        run: |
          cd frontend
          rm -rf dist node_modules/.vite .vite .env .env.production
          echo "VITE_API_URL=https://canary-backend-672344972017.europe-west1.run.app" > .env.production
          echo "Created .env.production:"
          cat .env.production
          echo "Starting build..."
          (
            unset VITE_API_URL
            export NODE_ENV=production
            npm run build 2>&1 | tee build.log || (echo "Build failed!" && cat build.log && exit 1)
          )
          echo "Build completed successfully"
          echo "Verifying built files:"
          ls -lh dist/ || echo "No dist folder"
          grep -o "https://canary-backend[^\"']*" dist/assets/*.js 2>/dev/null | head -3 || echo "No URLs found"

      - name: Prepare Frontend for deployment
        run: |
          cd frontend
          # Create .dockerignore to exclude everything except dist
          cat > .dockerignore << 'EOF'
          *
          !dist
          !nginx.conf
          EOF
          # Backup original Dockerfile
          cp Dockerfile Dockerfile.original
          # Create simple Dockerfile for pre-built dist
          cat > Dockerfile << 'EOF'
          FROM nginx:alpine
          COPY dist /usr/share/nginx/html
          COPY nginx.conf /etc/nginx/conf.d/default.conf
          EXPOSE 8080
          CMD ["nginx", "-g", "daemon off;"]
          EOF

      - name: Verify Build Output
        run: |
          cd frontend/dist
          echo "=== Checking built files for API URL ==="
          grep -o "https://canary-backend[^\"']*" index*.js | head -5 || echo "No URLs found"
          echo "=== End verification ==="

      - name: Deploy to Cloud Run
        run: |
          cd frontend
          echo "Deploying to Cloud Run..."
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --source . \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --min-instances=0 \
            --max-instances=10 \
            --memory=512Mi \
            --cpu=1 \
            --port=8080 \
            --timeout=900

      - name: Get Service URL
        id: get-url
        run: |
          URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format='value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "Frontend deployed to: $URL"

      - name: Health Check
        run: |
          sleep 10
          curl -f ${{ steps.get-url.outputs.url }} || exit 1

      - name: Deployment Success Notification
        if: success()
        run: |
          echo "✅ Frontend deployment successful!"
          echo "URL: ${{ steps.get-url.outputs.url }}"
          echo "Deployment timestamp: $(date)"

      - name: Deployment Failure Notification
        if: failure()
        run: |
          echo "❌ Frontend deployment failed!"
          exit 1
