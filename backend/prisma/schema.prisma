generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id            Int      @id @default(autoincrement())
  name          String
  email         String?
  phone         String?
  address       String?
  address2      String?
  
  // Extended Company Info
  taxNumber     String?
  taxOffice     String?
  tradeRegister String?
  mersisNo      String?
  city          String?
  district      String?
  postalCode    String?
  website       String?
  logo          String?
  
  // Contact Info
  mobilePhone      String?
  authorizedPerson String?
  
  // Bank Info
  iban          String?
  bankName      String?
  bankBranch    String?
  accountHolder String?
  
  // Settings
  timezone      String?  @default("Europe/Istanbul")
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  users         User[]
  categories    Category[]
  equipment     Equipment[]
  orders        Order[]
  calendarEvents CalendarEvent[]
  workOrders    WorkOrder[]
  serviceAssets ServiceAsset[]
  serviceParts  ServicePart[]
  technicians   Technician[]
  suppliers     Supplier[]
  booqableConnection BooqableConnection?
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  password    String
  name        String?
  role        String   @default("USER")
  isActive    Boolean  @default(true)
  company     Company? @relation(fields: [companyId], references: [id])
  companyId   Int?
  inspections Inspection[]
  assignedEvents CalendarEvent[]
  workOrders  WorkOrder[]
  technician  Technician?
  
  // Profile Info
  phone       String?
  title       String?
  avatar      String?
  
  // Notification Preferences
  emailOrders           Boolean @default(true)
  emailCalendar         Boolean @default(true)
  emailInventory        Boolean @default(false)
  smsOrders             Boolean @default(true)
  smsReminders          Boolean @default(false)
  pushNotifications     Boolean @default(true)
  notificationFrequency String  @default("instant") // instant, daily, weekly
  
  // Appearance Preferences
  theme       String  @default("light") // light, dark, auto
  language    String  @default("tr")    // tr, en
  dateFormat  String  @default("DD/MM/YYYY")
  timeFormat  String  @default("24h")   // 12h, 24h
  currency    String  @default("TRY")   // TRY, USD, EUR
  
  // Google Calendar Integration
  googleAccessToken     String?
  googleRefreshToken    String?
  googleTokenExpiry     DateTime?
  googleCalendarId      String?
  googleCalendarEnabled Boolean   @default(false)
  
  // WhatsApp Integration
  whatsappEnabled       Boolean   @default(false)
  whatsappNumber        String?
  
  // Paraşüt Integration (Accounting)
  parasutContactId String?   @unique  // Paraşüt contact ID
  taxOffice        String?            // Tax office name
  taxNumber        String?            // Tax/Identity number
  fullName         String?            // Full legal name
  address          String?            // Full address
  lastLoginIp      String?            // For fraud prevention
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  invoices    Invoice[]  // Invoices issued to this user
  cards       Card[]
  transactions Transaction[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  icon        String?   // Icon name from lucide-react
  color       String?   // Hex color for badge
  isActive    Boolean   @default(true)
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([companyId, name]) // Prevent duplicate category names per company
}

model Equipment {
  id           Int      @id @default(autoincrement())
  code         String?  @unique  // Unique equipment code (e.g., CAM-001)
  name         String
  brand        String?
  model        String?
  category     String?
  serialNumber String?
  qrCode       String?  @unique
  barcode      String?  @unique  // Format: EQ00000001
  quantity     Int      @default(1)  // Total quantity available
  
  // Basic Pricing
  dailyPrice   Float?
  weeklyPrice  Float?
  monthlyPrice Float?
  
  // Advanced Pricing
  hourlyPrice       Float?
  weekendPrice      Float?    // Weekend daily rate
  replacementValue  Float?    // For insurance/damage
  depositAmount     Float?    // Security deposit
  minRentalPeriod   Int?      // Minimum rental days
  maxRentalPeriod   Int?      // Maximum rental days
  
  status       String   @default("AVAILABLE") // AVAILABLE, RENTED, MAINTENANCE, LOST
  description  String?
  imageUrl     String?
  company      Company  @relation(fields: [companyId], references: [id])
  companyId    Int
  orderItems   OrderItem[]
  inspections  Inspection[]
  calendarEvents CalendarEvent[]
  workOrders   WorkOrder[]
  serviceAssets ServiceAsset[]
  scanLogs     ScanLog[]
  pricingRules PricingRule[]
  bundleItems  EquipmentBundleItem[]
  
  // Booqable Integration
  booqableId        String?   @unique
  booqableUpdatedAt DateTime?
  syncStatus        String    @default("LOCAL") // LOCAL, SYNCED, CONFLICT
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Customer {
  id          Int      @id @default(autoincrement())
  name        String
  email       String?
  phone       String?
  address     String?
  company     String?
  taxNumber   String?
  orders      Order[]
  inspections Inspection[]
  calendarEvents CalendarEvent[]
  workOrders  WorkOrder[]
  
  // Booqable Integration
  booqableId        String?   @unique
  booqableUpdatedAt DateTime?
  syncStatus        String    @default("LOCAL") // LOCAL, SYNCED, CONFLICT
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id          Int         @id @default(autoincrement())
  orderNumber String      @unique
  startDate   DateTime
  endDate     DateTime
  totalAmount Float
  status      String      @default("PENDING") // PENDING, CONFIRMED, ACTIVE, COMPLETED, CANCELLED
  notes       String?
  customer    Customer    @relation(fields: [customerId], references: [id])
  customerId  Int
  company     Company     @relation(fields: [companyId], references: [id])
  companyId   Int
  orderItems  OrderItem[]
  inspections Inspection[]
  calendarEvents CalendarEvent[]
  
  // Google Calendar Integration
  googleEventId       String?
  googleEventLink     String?
  calendarSynced      Boolean   @default(false)
  calendarSyncedAt    DateTime?
  
  // Booqable Integration
  booqableId        String?   @unique
  booqableUpdatedAt DateTime?
  syncStatus        String    @default("LOCAL") // LOCAL, SYNCED, CONFLICT
  
  // Invoicing
  invoices    Invoice[]   // Faturalar
  transactions Transaction[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id          Int       @id @default(autoincrement())
  quantity    Int       @default(1)
  dailyRate   Float
  totalAmount Float
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     Int
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  equipmentId Int
  createdAt   DateTime  @default(now())
}

// ============================================
// INSPECTION SYSTEM (Quality Control)
// ============================================

model Inspection {
  id              Int              @id @default(autoincrement())
  inspectionType  String           // "CHECKOUT" (Teslim), "CHECKIN" (İade)
  
  // İlişkiler
  order           Order            @relation(fields: [orderId], references: [id])
  orderId         Int
  equipment       Equipment        @relation(fields: [equipmentId], references: [id])
  equipmentId     Int
  inspector       User             @relation(fields: [inspectorId], references: [id])
  inspectorId     Int
  customer        Customer         @relation(fields: [customerId], references: [id])
  customerId      Int
  
  // Kontrol Detayları
  status          String           @default("PENDING") // "PENDING", "APPROVED", "REJECTED", "DAMAGE_FOUND"
  overallCondition String?         // "EXCELLENT", "GOOD", "FAIR", "POOR"
  
  // Checklist (JSON olarak saklanacak)
  checklistData   String?          // JSON: [{item: "Lens temiz", checked: true, notes: ""}]
  
  // İmzalar (Base64)
  customerSignature  String?
  inspectorSignature String?
  
  // Genel Notlar
  notes           String?
  location        String?          // Hangi şubede yapıldı
  
  // Timestamps
  inspectionDate  DateTime         @default(now())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // İlişkili Veriler
  photos          InspectionPhoto[]
  damageReports   DamageReport[]
}

model InspectionPhoto {
  id            Int        @id @default(autoincrement())
  inspection    Inspection @relation(fields: [inspectionId], references: [id], onDelete: Cascade)
  inspectionId  Int
  
  photoUrl      String     // Cloud storage URL veya local path
  photoType     String     // "GENERAL", "DAMAGE", "SERIAL_NUMBER", "FULL_VIEW"
  caption       String?
  
  // Metadata
  fileSize      Int?       // bytes
  mimeType      String?    // "image/jpeg", "image/png"
  
  createdAt     DateTime   @default(now())
}

model DamageReport {
  id            Int        @id @default(autoincrement())
  inspection    Inspection @relation(fields: [inspectionId], references: [id], onDelete: Cascade)
  inspectionId  Int
  
  // Hasar Detayları
  damageType    String     // "SCRATCH", "DENT", "BROKEN", "MISSING_PART", "MALFUNCTION", "COSMETIC", "FUNCTIONAL"
  severity      String     // "MINOR", "MODERATE", "MAJOR", "CRITICAL"
  description   String
  location      String?    // Hasarın yeri
  
  // Mali Bilgiler
  estimatedCost Float?
  actualCost    Float?
  
  // Sorumluluk
  responsibleParty String  // "CUSTOMER", "COMPANY", "THIRD_PARTY", "UNKNOWN"
  
  // Durum
  status        String     @default("REPORTED") // "REPORTED", "ASSESSED", "REPAIRED", "WRITTEN_OFF"
  
  // Fotoğraf
  photoUrl      String?
  
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model ChecklistTemplate {
  id            Int        @id @default(autoincrement())
  name          String     // "Kamera Kontrol", "Lens Kontrol"
  category      String?    // Ekipman kategorisi
  
  // Template Items (JSON)
  items         String     // JSON array
  
  isActive      Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// ==========================================
// CALENDAR SYSTEM
// ==========================================

model CalendarEvent {
  id              Int       @id @default(autoincrement())
  
  // Relations
  order           Order?    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         Int?
  equipment       Equipment? @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  equipmentId     Int?
  customer        Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId      Int?
  assignedUser    User?     @relation(fields: [assignedUserId], references: [id], onDelete: SetNull)
  assignedUserId  Int?
  company         Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       Int
  
  // Event Details
  title           String
  description     String?
  eventType       String    // "ORDER", "DELIVERY", "PICKUP", "MAINTENANCE", "INSPECTION", "MEETING", "REMINDER", "CUSTOM"
  
  // Time
  startDate       DateTime
  endDate         DateTime
  allDay          Boolean   @default(false)
  
  // Location
  location        String?
  
  // Status
  status          String    @default("SCHEDULED") // "SCHEDULED", "CONFIRMED", "IN_PROGRESS", "COMPLETED", "CANCELLED", "RESCHEDULED"
  
  // Priority & Color
  priority        String    @default("MEDIUM") // "LOW", "MEDIUM", "HIGH", "URGENT"
  color           String    @default("#3b82f6") // Hex color code
  
  // Recurrence
  isRecurring     Boolean   @default(false)
  recurrenceRule  String?   // RRULE format: "FREQ=DAILY;INTERVAL=1"
  parentEventId   Int?      // For recurring event instances
  
  // Reminders
  reminders       EventReminder[]
  
  // Google Calendar Sync (optional)
  googleEventId   String?
  googleSynced    Boolean   @default(false)
  googleSyncedAt  DateTime?
  
  // Metadata
  // Payment/Transaction relations (optional)
  transactions   Transaction[]
  notes           String?
  attachments     String?   // JSON array of file URLs
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model EventReminder {
  id              Int       @id @default(autoincrement())
  
  // Relation
  event           CalendarEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId         Int
  
  // Reminder Details
  reminderTime    DateTime  // When to send reminder
  method          String    // "EMAIL", "SMS", "PUSH", "IN_APP"
  
  // Status
  status          String    @default("PENDING") // "PENDING", "SENT", "FAILED"
  sentAt          DateTime?
  
  // Message (optional custom message)
  customMessage   String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// ============================================
// TECHNICAL SERVICE MODULE
// ============================================

model WorkOrder {
  id                    Int       @id @default(autoincrement())
  
  // Ticket Info
  ticketNumber          String    @unique
  title                 String
  description           String?
  issue                 String
  
  // Equipment Info
  equipmentId           Int?
  equipment             Equipment? @relation(fields: [equipmentId], references: [id])
  equipmentName         String
  serialNumber          String
  brand                 String?
  model                 String?
  
  // Customer Info
  customerId            Int?
  customer              Customer?  @relation(fields: [customerId], references: [id])
  customerName          String
  customerContact       String?
  
  // Status & Priority
  status                String    @default("NEW") // "NEW", "INSPECTING", "WAITING_PARTS", "REPAIRING", "TESTING", "COMPLETED", "RETURNED", "SCRAPPED"
  priority              String    @default("MEDIUM") // "LOW", "MEDIUM", "HIGH", "URGENT"
  
  // Assignment
  assignedToId          Int?
  assignedTo            User?     @relation(fields: [assignedToId], references: [id])
  assignedToName        String?
  technicianId          Int?
  technician            Technician? @relation(fields: [technicianId], references: [id])
  
  // Dates
  receivedDate          DateTime  @default(now())
  startDate             DateTime?
  estimatedCompletion   DateTime
  completedDate         DateTime?
  returnedDate          DateTime?
  
  // Costs
  laborCost             Float     @default(0)
  partsCost             Float     @default(0)
  totalCost             Float     @default(0)
  
  // Parts Used
  parts                 WorkOrderPart[]
  
  // Diagnosis & Resolution
  diagnosis             String?
  workPerformed         String?
  testResults           String?
  
  // Photos & Documents
  photos                String?   // JSON array of URLs
  documents             String?   // JSON array of URLs
  
  // SLA & Tracking
  slaDeadline           DateTime?
  slaCritical           Boolean   @default(false)
  
  // Notes
  internalNotes         String?
  customerNotes         String?
  
  // Warranty Info
  warrantyStatus        String?   // "IN_WARRANTY", "OUT_WARRANTY", "EXTENDED"
  warrantyExpiry        DateTime?
  
  // Company
  companyId             Int?
  company               Company?  @relation(fields: [companyId], references: [id])
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model WorkOrderPart {
  id                    Int       @id @default(autoincrement())
  
  // Relations
  workOrderId           Int
  workOrder             WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)
  partId                Int
  part                  ServicePart @relation(fields: [partId], references: [id])
  
  // Quantity & Cost
  quantity              Int       @default(1)
  unitCost              Float
  totalCost             Float
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model ServiceAsset {
  id                    Int       @id @default(autoincrement())
  
  // Basic Info
  name                  String
  brand                 String
  model                 String
  serialNumber          String    @unique
  assetCode             String    @unique
  
  // Equipment Reference (optional)
  equipmentId           Int?
  equipment             Equipment? @relation(fields: [equipmentId], references: [id])
  
  // Status
  status                String    @default("AVAILABLE") // "AVAILABLE", "IN_SERVICE", "IN_REPAIR", "OUT_OF_SERVICE"
  condition             String?   // "EXCELLENT", "GOOD", "FAIR", "POOR"
  
  // Purchase Info
  purchaseDate          DateTime?
  purchasePrice         Float?
  supplier              String?
  invoiceNumber         String?
  
  // Warranty & Maintenance
  warrantyExpiry        DateTime?
  lastMaintenance       DateTime?
  nextMaintenance       DateTime?
  maintenanceInterval   Int?      // Days
  
  // Location
  location              String?
  assignedTo            String?
  
  // Depreciation
  currentValue          Float?
  depreciationRate      Float?    // Percentage per year
  
  // Notes
  notes                 String?
  
  // Photos & Documents
  photos                String?   // JSON array
  documents             String?   // JSON array
  
  // QR Code
  qrCode                String?
  
  // Company
  companyId             Int?
  company               Company?  @relation(fields: [companyId], references: [id])
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model ServicePart {
  id                    Int       @id @default(autoincrement())
  
  // Basic Info
  code                  String    @unique
  name                  String
  description           String?
  category              String?
  
  // Inventory
  stock                 Int       @default(0)
  minStock              Int       @default(0)
  maxStock              Int?
  reorderPoint          Int?
  
  // Pricing
  unitCost              Float
  sellingPrice          Float?
  currency              String    @default("TRY")
  
  // Supplier
  supplier              String?
  supplierPartNumber    String?
  supplierContact       String?
  
  // Location
  location              String?   // Warehouse location
  bin                   String?   // Bin/Shelf location
  
  // Compatibility
  compatibleModels      String?   // JSON array
  
  // Usage
  workOrders            WorkOrderPart[]
  
  // Status
  isActive              Boolean   @default(true)
  isObsolete            Boolean   @default(false)
  
  // Photos
  photo                 String?
  
  // Notes
  notes                 String?
  
  // Company
  companyId             Int?
  company               Company?  @relation(fields: [companyId], references: [id])
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model Technician {
  id                    Int       @id @default(autoincrement())
  
  // Basic Info
  name                  String
  email                 String    @unique
  phone                 String?
  employeeId            String?   @unique
  
  // User Reference (optional)
  userId                Int?      @unique
  user                  User?     @relation(fields: [userId], references: [id])
  
  // Status
  status                String    @default("ACTIVE") // "ACTIVE", "INACTIVE", "ON_LEAVE"
  isAvailable           Boolean   @default(true)
  
  // Skills & Certifications
  skills                String?   // JSON array
  certifications        String?   // JSON array
  specialization        String?
  
  // Performance
  totalWorkOrders       Int       @default(0)
  completedWorkOrders   Int       @default(0)
  avgRepairTime         Float?    // Days
  rating                Float?    // 0-5 stars
  
  // Work Orders
  workOrders            WorkOrder[]
  
  // Schedule
  workingHours          String?   // JSON: {"monday": "09:00-18:00", ...}
  
  // Contact
  emergencyContact      String?
  address               String?
  
  // Employment
  hireDate              DateTime?
  department            String?
  
  // Photo
  photo                 String?
  
  // Notes
  notes                 String?
  
  // Company
  companyId             Int?
  company               Company?  @relation(fields: [companyId], references: [id])
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

// Booqable Integration Models
model BooqableConnection {
  id             Int       @id @default(autoincrement())
  companyId      Int       @unique
  company        Company   @relation(fields: [companyId], references: [id])
  apiKey         String    // Encrypted
  accountUrl     String
  isActive       Boolean   @default(true)
  lastSyncAt     DateTime?
  lastSyncStatus String?   // SUCCESS, FAILED, PARTIAL
  errorMessage   String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  syncs          BooqableSync[]
}

model BooqableSync {
  id                  Int       @id @default(autoincrement())
  connectionId        Int
  connection          BooqableConnection @relation(fields: [connectionId], references: [id])
  companyId           Int
  syncType            String    // PRODUCT, ORDER, CUSTOMER, FULL
  direction           String    // IMPORT, EXPORT, BIDIRECTIONAL
  status              String    // PENDING, IN_PROGRESS, SUCCESS, FAILED
  recordsProcessed    Int       @default(0)
  recordsFailed       Int       @default(0)
  recordsCreated      Int       @default(0)
  recordsUpdated      Int       @default(0)
  recordsSkipped      Int       @default(0)
  errorMessage        String?
  errorDetails        String?   // JSON
  startedAt           DateTime  @default(now())
  completedAt         DateTime?
  duration            Int?      // Seconds
  triggeredBy         String?   // USER, WEBHOOK, SCHEDULED
}

// ==========================================
// PAYMENT / TRANSACTION MODELS
// ==========================================

model Transaction {
  id                   Int       @id @default(autoincrement())
  order                Order?    @relation(fields: [orderId], references: [id])
  orderId              Int?
  invoice              Invoice?  @relation(fields: [invoiceId], references: [id])
  invoiceId            Int?
  customer             User?     @relation(fields: [customerId], references: [id])
  customerId           Int?

  // iyzico specific
  iyzicoPaymentId      String?   @unique
  conversationId       String?   @unique
  iyzicoPaymentStatus  String?

  amount               Float
  currency             String    @default("TRY")
  installment          Int       @default(1)
  type                 String    @default("credit_card") // credit_card, bank_transfer, wallet

  // Card / Buyer info (masked)
  cardNumber           String?
  cardType             String?
  cardAssociation      String?

  // Refund info
  refundedAmount       Float?    @default(0)

  status               String    @default("pending") // pending, completed, failed, refunded, cancelled
  errorMessage         String?
  responseData         String?   // raw response JSON

  // Timestamps
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  completedAt          DateTime?

  // Relations
  refunds              Refund[]
  events               CalendarEvent[]

  @@index([orderId])
  @@index([invoiceId])
  @@index([customerId])
  @@index([createdAt])
}

model Card {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id])
  userId          Int
  cardToken       String   @unique
  mask            String
  cardType        String?
  association     String?
  isDefault       Boolean  @default(false)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())

  @@index([userId])
}
// QR/Barcode Scan Logging
model ScanLog {
  id           Int       @id @default(autoincrement())
  equipmentId  Int
  equipment    Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  scannedCode  String    // QR code or barcode value
  scanType     String    // QR, BARCODE
  scanAction   String?   // VIEW, CHECKIN, CHECKOUT, INVENTORY_CHECK
  scannedBy    String?   // User name or ID
  location     String?   // Physical location or GPS coordinates
  deviceInfo   String?   // Device used for scanning
  ipAddress    String?   // IP address of scanner
  userAgent    String?   // Browser/app info
  notes        String?   // Additional notes
  companyId    Int?
  createdAt    DateTime  @default(now())
  
  @@index([equipmentId])
  @@index([scannedCode])
  @@index([createdAt])
}

// Notification System
model Notification {
  id              Int       @id @default(autoincrement())
  companyId       Int?
  userId          Int?      // Recipient user
  type            String    // EMAIL, SMS, PUSH, IN_APP
  channel         String?   // Delivery channel details
  recipientEmail  String?   // For email notifications
  recipientPhone  String?   // For SMS notifications
  title           String    // Notification title
  message         String    // Notification message/body
  templateId      String?   // Reference to notification template
  category        String?   // RESERVATION, ORDER, EQUIPMENT, REMINDER, ALERT
  priority        String    @default("NORMAL") // LOW, NORMAL, HIGH, URGENT
  status          String    @default("PENDING") // PENDING, SENT, DELIVERED, FAILED, READ
  sentAt          DateTime?
  deliveredAt     DateTime?
  readAt          DateTime?
  failedAt        DateTime?
  errorMessage    String?
  retryCount      Int       @default(0)
  maxRetries      Int       @default(3)
  metadata        String?   // JSON - additional data (orderId, equipmentId, etc)
  scheduledFor    DateTime? // For scheduled notifications
  expiresAt       DateTime? // Notification expiration
  actionUrl       String?   // Deep link or action URL
  actionLabel     String?   // Button text for action
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([category])
  @@index([scheduledFor])
  @@index([createdAt])
}

// Notification Templates
model NotificationTemplate {
  id          Int       @id @default(autoincrement())
  companyId   Int?
  code        String    @unique // RESERVATION_CONFIRMED, ORDER_DUE, EQUIPMENT_AVAILABLE, etc
  name        String    // Human-readable name
  description String?
  category    String    // RESERVATION, ORDER, EQUIPMENT, REMINDER, ALERT
  type        String    // EMAIL, SMS, PUSH, IN_APP
  subject     String?   // For emails
  body        String    // Template body with placeholders {{variable}}
  variables   String?   // JSON array of available variables
  isActive    Boolean   @default(true)
  isDefault   Boolean   @default(false)
  language    String    @default("tr") // tr, en
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([code])
  @@index([category])
  @@index([isActive])
}

// Notification Preferences (User settings)
model NotificationPreference {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique
  emailEnabled      Boolean   @default(true)
  smsEnabled        Boolean   @default(false)
  pushEnabled       Boolean   @default(true)
  inAppEnabled      Boolean   @default(true)
  // Category preferences
  reservationEmail  Boolean   @default(true)
  reservationSms    Boolean   @default(false)
  reservationPush   Boolean   @default(true)
  orderEmail        Boolean   @default(true)
  orderSms          Boolean   @default(false)
  orderPush         Boolean   @default(true)
  equipmentEmail    Boolean   @default(true)
  equipmentSms      Boolean   @default(false)
  equipmentPush     Boolean   @default(true)
  reminderEmail     Boolean   @default(true)
  reminderSms       Boolean   @default(true)
  reminderPush      Boolean   @default(true)
  alertEmail        Boolean   @default(true)
  alertSms          Boolean   @default(true)
  alertPush         Boolean   @default(true)
  // Frequency
  dailyDigest       Boolean   @default(false)
  weeklyDigest      Boolean   @default(false)
  quietHoursStart   String?   // HH:MM format
  quietHoursEnd     String?   // HH:MM format
  timezone          String?   @default("Europe/Istanbul")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

// ============================================
// PRICING SYSTEM
// ============================================

// Pricing Rules - Advanced pricing logic
model PricingRule {
  id              Int       @id @default(autoincrement())
  equipmentId     Int
  equipment       Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  companyId       Int?
  
  // Rule Details
  name            String    // "Weekend Special", "Long-term Discount", etc.
  description     String?
  ruleType        String    // DURATION, QUANTITY, SEASONAL, CUSTOM
  
  // Duration-based pricing (tiered)
  durationType    String?   // HOURLY, DAILY, WEEKLY, MONTHLY, CUSTOM
  minDuration     Int?      // Minimum duration (in hours/days)
  maxDuration     Int?      // Maximum duration (null = unlimited)
  pricePerUnit    Float?    // Price per hour/day/week/month
  
  // Discount settings
  discountType    String?   // PERCENTAGE, FIXED_AMOUNT, SPECIAL_RATE
  discountValue   Float?    // Discount percentage or fixed amount
  
  // Quantity-based (for bulk rentals)
  minQuantity     Int?      @default(1)
  maxQuantity     Int?
  
  // Seasonal/Date-based
  startDate       DateTime?
  endDate         DateTime?
  daysOfWeek      String?   // JSON array: [0,6] for weekends
  
  // Priority (higher = applied first)
  priority        Int       @default(0)
  
  // Status
  isActive        Boolean   @default(true)
  isAutoApplied   Boolean   @default(true) // Auto-apply or require code
  promoCode       String?   // Optional promo code
  
  // Usage limits
  maxUsage        Int?      // Max times this rule can be used
  currentUsage    Int       @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([equipmentId])
  @@index([ruleType])
  @@index([isActive])
  @@index([startDate, endDate])
}

// Equipment Bundles - Package multiple items
model EquipmentBundle {
  id              Int       @id @default(autoincrement())
  companyId       Int?
  
  name            String
  description     String?
  category        String?
  imageUrl        String?
  
  // Pricing
  bundlePrice     Float     // Total bundle price
  originalPrice   Float?    // Sum of individual items
  discountPercent Float?    // Calculated discount percentage
  
  // Bundle settings
  isActive        Boolean   @default(true)
  isCustomizable  Boolean   @default(false) // Can customer modify bundle?
  minItems        Int       @default(2)
  maxItems        Int?
  
  // Availability
  availableFrom   DateTime?
  availableTo     DateTime?
  
  bundleItems     EquipmentBundleItem[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([companyId])
  @@index([isActive])
}

// Equipment Bundle Items - Link equipment to bundles
model EquipmentBundleItem {
  id              Int               @id @default(autoincrement())
  bundleId        Int
  bundle          EquipmentBundle   @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  equipmentId     Int
  equipment       Equipment         @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  
  quantity        Int               @default(1)
  isOptional      Boolean           @default(false)
  isPrimary       Boolean           @default(false) // Main item in bundle
  displayOrder    Int               @default(0)
  
  createdAt       DateTime          @default(now())
  
  @@unique([bundleId, equipmentId])
  @@index([bundleId])
  @@index([equipmentId])
}

// Discount Codes - Promo codes for general discounts
model DiscountCode {
  id              Int       @id @default(autoincrement())
  companyId       Int?
  
  code            String    @unique // SUMMER2025, FIRST10, etc.
  name            String
  description     String?
  
  // Discount details
  discountType    String    // PERCENTAGE, FIXED_AMOUNT, FREE_DELIVERY
  discountValue   Float     // 10 (%), 50 (TL), etc.
  
  // Applicability
  appliesTo       String    // ALL, CATEGORY, SPECIFIC_ITEMS
  categoryFilter  String?   // Category name if appliesTo = CATEGORY
  equipmentIds    String?   // JSON array of equipment IDs
  
  // Constraints
  minOrderAmount  Float?    // Minimum order amount required
  maxDiscount     Float?    // Maximum discount amount
  
  // Usage limits
  maxUsage        Int?      // Max total uses
  maxUsagePerUser Int?      @default(1)
  currentUsage    Int       @default(0)
  
  // Validity
  validFrom       DateTime
  validTo         DateTime
  isActive        Boolean   @default(true)
  
  // Tracking
  usageCount      Int       @default(0)
  createdBy       String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([code])
  @@index([isActive])
  @@index([validFrom, validTo])
}

// Price History - Track pricing changes over time
model PriceHistory {
  id              Int       @id @default(autoincrement())
  equipmentId     Int
  companyId       Int?
  
  // Old prices
  oldDailyPrice   Float?
  oldWeeklyPrice  Float?
  oldMonthlyPrice Float?
  
  // New prices
  newDailyPrice   Float?
  newWeeklyPrice  Float?
  newMonthlyPrice Float?
  
  // Change details
  changeReason    String?   // MARKET_ADJUSTMENT, SEASONAL, COMPETITION, etc.
  changePercent   Float?    // Percentage change
  changedBy       String?   // User who made the change
  
  effectiveDate   DateTime  @default(now())
  createdAt       DateTime  @default(now())
  
  @@index([equipmentId])
  @@index([effectiveDate])
}

// ============================================
// RESERVATION SYSTEM MODELS
// ============================================

// Main Reservation Model
model Reservation {
  id              Int       @id @default(autoincrement())
  reservationNo   String    @unique // Auto-generated: RES-2025-0001
  companyId       Int
  
  // Customer Information
  customerId      Int?      // If registered customer
  customerName    String    // Guest name if not registered
  customerEmail   String
  customerPhone   String
  customerAddress String?
  
  // Reservation Details
  startDate       DateTime
  endDate         DateTime
  pickupTime      String?   @default("09:00")
  returnTime      String?   @default("18:00")
  
  // Location
  pickupLocation  String?
  returnLocation  String?
  deliveryRequired Boolean  @default(false)
  deliveryAddress  String?
  deliveryFee     Float?    @default(0)
  
  // Status Management
  status          String    @default("PENDING") // PENDING, CONFIRMED, IN_PROGRESS, COMPLETED, CANCELLED, REJECTED
  previousStatus  String?   // For status history tracking
  
  // Pricing
  subtotal        Float     // Base price for all items
  discountAmount  Float     @default(0)
  discountCode    String?   // Applied promo code
  taxAmount       Float     @default(0)
  taxRate         Float     @default(20) // VAT %
  totalAmount     Float     // Final amount to pay
  
  // Payment
  depositAmount   Float     @default(0)
  depositPaid     Boolean   @default(false)
  depositPaidAt   DateTime?
  depositMethod   String?   // CASH, CARD, TRANSFER, ONLINE
  
  remainingAmount Float     @default(0)
  fullPayment     Boolean   @default(false)
  fullPaymentAt   DateTime?
  fullPaymentMethod String?
  
  // Additional Details
  notes           String?   // Customer notes
  internalNotes   String?   // Staff notes (not visible to customer)
  specialRequests String?   // Special requirements
  
  // Approval & Assignment
  approvedBy      Int?      // User ID who approved
  approvedAt      DateTime?
  rejectedBy      Int?      // User ID who rejected
  rejectedAt      DateTime?
  rejectionReason String?
  assignedTo      Int?      // Staff/technician assigned
  
  // Terms & Conditions
  termsAccepted   Boolean   @default(false)
  termsAcceptedAt DateTime?
  contractSigned  Boolean   @default(false)
  contractSignedAt DateTime?
  
  // Tracking
  createdBy       Int?      // User ID who created
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  items           ReservationItem[]
  statusHistory   ReservationStatusHistory[]
  payments        ReservationPayment[]
  
  @@index([reservationNo])
  @@index([companyId])
  @@index([customerId])
  @@index([status])
  @@index([startDate, endDate])
  @@index([createdAt])
}

// Reservation Items - Equipment in the reservation
model ReservationItem {
  id              Int       @id @default(autoincrement())
  reservationId   Int
  reservation     Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  
  // Equipment Details
  equipmentId     Int
  equipmentName   String    // Snapshot for historical accuracy
  equipmentCode   String?
  quantity        Int       @default(1)
  
  // Pricing (at time of reservation)
  unitPrice       Float     // Daily/hourly rate
  pricingType     String    @default("DAILY") // HOURLY, DAILY, WEEKLY, MONTHLY
  duration        Int       // Number of days/hours
  
  // Discounts applied to this item
  itemDiscount    Float     @default(0)
  discountReason  String?   // From bundle, seasonal rule, etc.
  
  // Calculated prices
  subtotal        Float     // unitPrice * duration * quantity
  totalPrice      Float     // After discounts
  
  // Equipment condition
  conditionBefore String?   // NEW, GOOD, FAIR, WORN
  conditionAfter  String?   // Condition after return
  damageNotes     String?   // Any damage reported
  
  // Status
  isDelivered     Boolean   @default(false)
  deliveredAt     DateTime?
  isReturned      Boolean   @default(false)
  returnedAt      DateTime?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([reservationId])
  @@index([equipmentId])
}

// Reservation Status History - Track all status changes
model ReservationStatusHistory {
  id              Int       @id @default(autoincrement())
  reservationId   Int
  reservation     Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  
  // Status change details
  fromStatus      String?   // Previous status (null for first entry)
  toStatus        String    // New status
  
  // Change metadata
  changedBy       Int?      // User ID who made the change
  changedByName   String?   // User name snapshot
  reason          String?   // Reason for change
  notes           String?   // Additional notes
  
  // Notification tracking
  customerNotified Boolean  @default(false)
  notificationSent Boolean  @default(false)
  notificationMethod String? // EMAIL, SMS, PUSH
  
  createdAt       DateTime  @default(now())
  
  @@index([reservationId])
  @@index([createdAt])
}

// Reservation Payments - Track all payment transactions
model ReservationPayment {
  id              Int       @id @default(autoincrement())
  reservationId   Int
  reservation     Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  
  // Payment details
  amount          Float
  paymentType     String    // DEPOSIT, PARTIAL, FULL, REFUND
  paymentMethod   String    // CASH, CARD, TRANSFER, ONLINE, CHECK
  
  // Card/online payment details
  transactionId   String?   // External payment gateway transaction ID
  cardLastFour    String?   // Last 4 digits of card
  cardBrand       String?   // VISA, MASTERCARD, etc.
  
  // Bank transfer details
  transferRef     String?   // Bank reference number
  bankName        String?
  
  // Status
  status          String    @default("COMPLETED") // PENDING, COMPLETED, FAILED, REFUNDED
  
  // Tracking
  paidBy          String?   // Customer name
  receivedBy      Int?      // Staff user ID
  receiptNumber   String?   // Receipt/invoice number
  notes           String?
  
  paidAt          DateTime  @default(now())
  createdAt       DateTime  @default(now())
  
  @@index([reservationId])
  @@index([status])
  @@index([paidAt])
}

// Device Tokens - For push notifications (Mobile App)
model DeviceToken {
  id          Int      @id @default(autoincrement())
  userId      Int
  token       String   // Expo push token or FCM token
  platform    String   // ios, android, web
  deviceId    String   // Unique device identifier
  lastUsedAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  
  @@unique([userId, deviceId])
  @@index([userId])
  @@index([token])
}

// Invoice - Fatura Yönetimi (Paraşüt Entegrasyonu)
model Invoice {
  id                Int       @id @default(autoincrement())
  orderId           Int       // İlişkili sipariş
  customerId        Int       // Müşteri

  // Paraşüt Integration
  parasutInvoiceId  String?   @unique  // Paraşüt'teki invoice ID

  // Invoice Details
  invoiceNumber     String?              // Fatura numarası (e.g., 2025000001)
  invoiceDate       DateTime             // Fatura tarihi
  dueDate           DateTime             // Vade tarihi

  // Amounts
  totalAmount       Float                // Net tutar (KDV hariç)
  vatAmount         Float                // KDV tutarı
  grandTotal        Float                // Toplam tutar (KDV dahil)
  paidAmount        Float     @default(0) // Ödenen tutar

  // Status
  status            String    @default("draft")  // draft, sent, paid, partial_paid, cancelled, overdue
  type              String    @default("rental") // rental, late_fee, deposit_refund, other

  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  order             Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  customer          User      @relation(fields: [customerId], references: [id])
  payments          Payment[] // Ödeme kayıtları
  transactions      Transaction[]

  @@index([orderId])
  @@index([customerId])
}

// Payment records related to invoices
model Payment {
  id                Int       @id @default(autoincrement())
  invoiceId         Int
  invoice           Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  // Payment Details
  amount            Float                // Ödeme tutarı
  paymentDate       DateTime             // Ödeme tarihi
  paymentMethod     String               // credit_card, bank_transfer, cash, etc.
  transactionId     String?              // Banka/ödeme gateway transaction ID

  // Paraşüt Integration
  parasutPaymentId  String?   @unique   // Paraşüt'teki payment ID

  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([invoiceId])
  @@index([paymentDate])
  @@index([paymentMethod])
}

// Refund - İade Kayıtları
model Refund {
  id                Int       @id @default(autoincrement())
  orderId           Int       // İlişkili sipariş
  transactionId     String?              // İşlem ID
  transaction       Transaction? @relation(fields: [transactionId], references: [iyzicoPaymentId])
  
  // Refund Details
  amount            Float                // İade tutarı
  reason            String               // İade nedeni
  status            String    @default("pending") // pending, completed, failed
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@index([orderId])
  @@index([status])
}

// Supplier Model
model Supplier {
  id              Int      @id @default(autoincrement())
  name            String
  email           String?
  phone           String?
  address         String?
  contactPerson   String?
  notes           String?
  
  // Company Relation
  company         Company  @relation(fields: [companyId], references: [id])
  companyId       Int
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([companyId])
  @@index([name])
}
