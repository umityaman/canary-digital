import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcrypt';

const prisma = new PrismaClient();

async function seedSimpleInvoices() {
  try {
    console.log('üå± Basit fatura seed ba≈ülƒ±yor...');

    // Company'yi bul veya olu≈ütur
    let company = await prisma.company.findFirst();
    
    if (!company) {
      company = await prisma.company.create({
        data: {
          name: 'Canary Dijital Ltd.',
          slug: 'canary',
          email: 'info@canary.com',
          phone: '+90 212 555 0123',
          address: 'ƒ∞stanbul',
          settings: {},
        } as any,
      });
      console.log('‚úÖ Company olu≈üturuldu');
    } else {
      console.log('‚ÑπÔ∏è  Mevcut company:', company.name);
    }

    // Admin user'ƒ± bul veya olu≈ütur
    let admin = await prisma.user.findFirst({
      where: { role: 'ADMIN' }
    });

    if (!admin) {
      const hashedPassword = await bcrypt.hash('admin123', 10);
      admin = await prisma.user.create({
        data: {
          email: 'admin@canary.com',
          password: hashedPassword,
          name: 'Admin',
          role: 'ADMIN',
          companyId: company.id,
        },
      });
      console.log('‚úÖ Admin olu≈üturuldu');
    } else {
      console.log('‚ÑπÔ∏è  Mevcut admin:', admin.email);
    }

    // 5 M√º≈üteri (User olarak)
    const customers = [
      {
        email: 'abc@teknoloji.com',
        name: 'ABC Teknoloji A.≈û.',
        taxNumber: '9876543210', // VKN (10 hane) - E-Fatura
        taxOffice: 'Kadƒ±k√∂y VD',
        phone: '+90 216 555 0001',
        address: 'Kadƒ±k√∂y, ƒ∞stanbul',
      },
      {
        email: 'xyz@medya.com',
        name: 'XYZ Medya Ltd.',
        taxNumber: '5432167890', // VKN - E-Fatura
        taxOffice: 'Be≈üikta≈ü VD',
        phone: '+90 212 555 0002',
        address: 'Be≈üikta≈ü, ƒ∞stanbul',
      },
      {
        email: 'ahmet@gmail.com',
        name: 'Ahmet Yƒ±lmaz',
        taxNumber: '12345678901', // TCKN (11 hane) - E-Ar≈üiv
        phone: '+90 532 555 0003',
        address: '≈ûi≈üli, ƒ∞stanbul',
      },
      {
        email: 'def@eticaret.com',
        name: 'DEF E-Ticaret A.≈û.',
        taxNumber: '1122334455', // VKN - E-Fatura
        taxOffice: '√úmraniye VD',
        phone: '+90 216 555 0004',
        address: '√úmraniye, ƒ∞stanbul',
      },
      {
        email: 'zeynep@gmail.com',
        name: 'Zeynep Kaya',
        taxNumber: '98765432109', // TCKN - E-Ar≈üiv
        phone: '+90 533 555 0005',
        address: 'Beyoƒülu, ƒ∞stanbul',
      },
    ];

    console.log('üë• M√º≈üteriler olu≈üturuluyor...');
    const createdCustomers: any[] = [];
    
    for (const custData of customers) {
      let customer = await prisma.user.findFirst({
        where: { email: custData.email }
      });

      if (!customer) {
        const hashedPassword = await bcrypt.hash('customer123', 10);
        customer = await prisma.user.create({
          data: {
            email: custData.email,
            password: hashedPassword,
            name: custData.name,
            fullName: custData.name,
            role: 'USER',
            companyId: company.id,
            taxNumber: custData.taxNumber,
            taxOffice: custData.taxOffice,
            phone: custData.phone,
            address: custData.address,
          },
        });
        console.log(`  ‚úÖ ${custData.name}`);
      } else {
        console.log(`  ‚ÑπÔ∏è  ${custData.name} (mevcut)`);
      }

      createdCustomers.push(customer);
    }

    // ≈ûimdi 5 Sipari≈ü + 5 Fatura olu≈ütur
    console.log('üì¶ Sipari≈üler ve faturalar olu≈üturuluyor...');

    const orderData = [
      {
        customer: createdCustomers[0], // ABC Teknoloji
        orderNumber: `ORD-${Date.now()}-001`,
        items: [
          { desc: 'Web Sitesi Tasarƒ±mƒ±', qty: 1, price: 25000 },
          { desc: 'SEO Optimizasyonu 6 Aylƒ±k', qty: 1, price: 12000 },
          { desc: 'Hosting Yƒ±llƒ±k', qty: 1, price: 3000 },
        ],
      },
      {
        customer: createdCustomers[1], // XYZ Medya
        orderNumber: `ORD-${Date.now()}-002`,
        items: [
          { desc: 'Sosyal Medya Y√∂netimi 3 Ay', qty: 1, price: 15000 },
          { desc: 'ƒ∞√ßerik √úretimi 20 G√∂nderi', qty: 1, price: 10000 },
          { desc: 'Video Prod√ºksiyon 2 Adet', qty: 2, price: 8000 },
        ],
      },
      {
        customer: createdCustomers[2], // Ahmet Yƒ±lmaz (TCKN)
        orderNumber: `ORD-${Date.now()}-003`,
        items: [
          { desc: 'Ki≈üisel Web Sitesi', qty: 1, price: 5000 },
          { desc: 'Logo Tasarƒ±mƒ±', qty: 1, price: 2000 },
          { desc: 'Domain ve Hosting', qty: 1, price: 1200 },
        ],
      },
      {
        customer: createdCustomers[3], // DEF E-Ticaret
        orderNumber: `ORD-${Date.now()}-004`,
        items: [
          { desc: 'E-Ticaret Platformu Kurulumu', qty: 1, price: 45000 },
          { desc: '√ñdeme Sistemi Entegrasyonu', qty: 1, price: 8000 },
          { desc: 'Mobil Uygulama iOS+Android', qty: 1, price: 35000 },
          { desc: 'Admin Paneli', qty: 1, price: 12000 },
        ],
      },
      {
        customer: createdCustomers[4], // Zeynep Kaya (TCKN)
        orderNumber: `ORD-${Date.now()}-005`,
        items: [
          { desc: 'Fotoƒüraf √áekimi', qty: 1, price: 3500 },
          { desc: 'Video Kurgu', qty: 1, price: 2500 },
          { desc: 'Drone √áekimi', qty: 1, price: 4000 },
        ],
      },
    ];

    let invoiceCount = 0;
    let totalAmount = 0;

    for (let i = 0; i < orderData.length; i++) {
      const data = orderData[i];
      const customer = data.customer;

      // Sipari≈ü olu≈ütur
      const order = await prisma.order.create({
        data: {
          orderNumber: data.orderNumber,
          customerId: customer.id,
          companyId: company.id,
          startDate: new Date(),
          endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
          totalAmount: data.items.reduce((sum, item) => sum + (item.qty * item.price), 0),
          status: 'CONFIRMED',
          notes: `Otomatik seed: ${customer.name}`,
        },
      });

      // Fatura hesaplarƒ±
      const subtotal = data.items.reduce((sum, item) => sum + (item.qty * item.price), 0);
      const vatAmount = subtotal * 0.20; // %20 KDV
      const grandTotal = subtotal + vatAmount;

      // Fatura numarasƒ±
      const invoiceNumber = `FAT-2025-${String(i + 1).padStart(4, '0')}`;

      // Fatura olu≈ütur
      const invoice = await prisma.invoice.create({
        data: {
          invoiceNumber,
          orderId: order.id,
          customerId: customer.id,
          invoiceDate: new Date(),
          dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
          totalAmount: subtotal,
          vatAmount: vatAmount,
          grandTotal: grandTotal,
          paidAmount: 0,
          status: 'draft',
          type: 'sales',
        },
      });

      invoiceCount++;
      totalAmount += grandTotal;

      console.log(`  ‚úÖ ${invoiceNumber}: ${customer.name} - ${grandTotal.toFixed(2)} TL`);
    }

    console.log('\n‚ú® Seed tamamlandƒ±!');
    console.log(`üìä Toplam: ${invoiceCount} fatura, ${totalAmount.toFixed(2)} TL`);
    console.log(`üë• ${createdCustomers.length} m√º≈üteri olu≈üturuldu`);
    console.log(`   - ${createdCustomers.filter((c: any) => c.taxNumber?.length === 10).length} VKN (E-Fatura)`);
    console.log(`   - ${createdCustomers.filter((c: any) => c.taxNumber?.length === 11).length} TCKN (E-Ar≈üiv)`);

  } catch (error) {
    console.error('‚ùå Seed hatasƒ±:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

seedSimpleInvoices();
